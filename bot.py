import asyncio
import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ContentType
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from database import Database
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = Database()

class Registration(StatesGroup):
    full_name = State()
    birth_date = State()
    phone = State()

def main_menu():
    buttons = [
        [KeyboardButton(text="üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def contacts_keyboard():
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://example.com")]
    ])
    return buttons

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.set_state(Registration.full_name)

@dp.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è).")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.1990):")
    await state.set_state(Registration.birth_date)

@dp.message(Registration.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        birth_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(birth_date=birth_date)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=keyboard)
    await state.set_state(Registration.phone)

@dp.message(Registration.phone, F.content_type == ContentType.CONTACT)
async def process_phone(message: Message, state: FSMContext):
    contact = message.contact
    if contact is None or contact.user_id != message.from_user.id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return
    phone = contact.phone_number
    data = await state.get_data()
    full_name = data.get('full_name')
    birth_date = data.get('birth_date')  # –û–±—ä–µ–∫—Ç datetime.date

    try:
        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç datetime.date –Ω–∞–ø—Ä—è–º—É—é
        await db.add_user(full_name, birth_date, phone)
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def info_company(message: Message):
    text = (
        "üè¢ *–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è*\n\n"
        "–ú—ã ‚Äî –ª–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞ —Å 2010 –≥–æ–¥–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–≥ –±–æ—Ç–æ–≤\n"
        "üåü –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –Ω–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏."
    )
    photo_url = "https://cdn-icons-png.flaticon.com/512/190/190411.png"
    await message.answer_photo(photo=photo_url, caption=text, parse_mode="Markdown")

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    text = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "üìß Email: info@marsdev.com\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∞–π–∫–∏–Ω–∞, –¥. 1"
    )
    await message.answer(text, reply_markup=contacts_keyboard())

@dp.message(F.text == "üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def leave_request(message: Message):
    await message.answer("‚öôÔ∏è –ë–ª–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üîß")

async def main():
    await db.connect()
    await db.create_tables()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
